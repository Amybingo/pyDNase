{"name":"pyDNase","tagline":"a python library for analyzing DNAse-seq data","body":"================================================\r\npyDNase - a library for analyzing DNAse-seq data\r\n================================================\r\n\r\n\r\nIntroduction\r\n------------\r\n\r\nMany people currently analyzing DNase-seq data are using tools designed for ChIP-seq work, but may be innapropriate for DNAse-seq data where one is less interested in the overlaps of sequenced fragments, but the site at which the cut occurs (the 5' most end of the aligned sequence fragment).\r\n\r\nWe have developed `pyDNase` to interface with a sorted and indexed BAM file from a DNase-seq experiment, allowing efficient and easy random access of DNase-seq cut data from any genomic location, e.g.\r\n\r\n    >>> import pyDNase\r\n    >>> reads = pyDNase.BAMHandler(\"pyDNase/test/data/example.bam\")\r\n    >>> reads[\"chr6\",170863500:170863532]\r\n    {'+': array([0,0,0,0,1,0,0,1,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0]),\r\n     '-': array([0,10,1,0,1,0,4,9,0,1,0,2,1,0,0,0,0,0,3,0,6,3,0,0,0,1,1,1,3,0,3,6])}\r\n\r\nQuerying the ``BAMHandler`` object returns a dictionary containing numpy arrays with DNase cut counts on the positive reference strand (+), and cuts on the negative reference strand (-). `pyDNase` efficiently caches the cut data queried, so that multiple requests from the same genomic locations do not require repeated lookups from the BAM file (this can be disabled).\r\n\r\n`pyDNase` comes with several analysis scripts covering several common use cases of DNase-seq analysis, and also an implementation of the Wellington and Wellington 1D footprinting algorithms.\r\n\r\nto install `pyDNase` is as easy as::\r\n\r\n    $ pip install pyDNase\r\n\r\nfor full documentation go to: http://pythonhosted.org/pyDNase/\r\n\r\nContributions\r\n-------------\r\nI highly encourage contributions! This is my first software development project - send any pull requests this way. I'm particularly interested in cool analysis scripts that anyone has written.\r\n\r\nReference\r\n---------\r\n\r\nIf you use `pyDNase` or the Wellington algorithm in your work, please cite the following paper.\r\n\r\nPiper et al. 2013. *Wellington: A novel method for the accurate identification of digital genomic footprints from DNase-seq data*, Nucleic Acids Research XXX(XXX):XXX-XXX\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (C) 2013 Jason Piper. This work is licensed under the GNU GPLv3 license, see ``LICENCE.TXT`` for details.\r\n","google":"UA-42970620-1","note":"Don't delete this file! It's used internally to help with page regeneration."}